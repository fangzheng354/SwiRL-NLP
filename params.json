{"name":"SwiRL-NLP","tagline":"C++ interface between SISTA's CoreNLP processors and SwiRL.","body":"SwiRL-NLP\r\n=========\r\n\r\nThis project provides C++ integration between Mihai Surdeanu's SISTA CoreNLP\r\n[processors](https://github.com/sistanlp/processors) (written in Scala)\r\nand his [SwiRL](http://www.surdeanu.info/mihai/swirl/index.php) system\r\n(written in C++).\r\n\r\nThe code supplies seamless serialization & deserialization of SISTA's CoreNLP\r\ndocuments in C++. This allows us to use SwiRL to add semantic role labels to a\r\ndocument previously annotated with CoreNLP, which has the advantage of using\r\nCoreNLP's POS tagger and named-entity engine to bootstrap SwiRL.\r\n\r\n\r\n\r\n## Dependencies\r\n\r\n**WordNet**\r\n\r\nMake sure you have WordNet installed and the environment variable $WNHOME is\r\nset to the root of the installation directory.  You can download and install\r\nWordNet from [here](http://wordnet.princeton.edu/), then set $WNHOME\r\naccordingly. See example below.\r\n```\r\n$ # If you installed wordnet to /usr/local/WordNet-3.0/\r\n$ export WNHOME='/usr/local/WordNet-3.0/'\r\n$ echo $WNHOME\r\n/usr/local/WordNet-3.0/\r\n```\r\n\r\n**SwiRL**\r\n\r\nMake sure SwiRL is installed.  Download, build, and install SwiRL from\r\n[here](http://www.surdeanu.info/mihai/swirl/).  Alternatively if you are\r\ndeveloping in OSX, check out [SwiRL-OSX](http://trananh.github.io/SwiRL-OSX/).\r\n\r\nFor common build errors, please refer to this\r\n[FAQ](http://www.surdeanu.info/mihai/swirl/faq.php).\r\n\r\n\r\n\r\n## Compilation\r\n\r\nBefore compiling, you may need to update the installation paths of SwiRL in the\r\nMakefile. By default, the include path for SwiRL points to\r\n```/usr/local/include/swirl``` and the lib path is set to ```/usr/local/lib```.\r\nIf you installed SwiRL to a different location, please update the variables at\r\nthe top of the Makefile accordingly.\r\n```\r\n# SWIRL's installation\r\nSWIRLINC = /usr/local/include/swirl\r\nSWIRLLIB = /usr/local/lib\r\n```\r\n\r\nOnce all the paths are resolved. The usual make will compile the project.\r\n```\r\n$ cd /path/to/SwiRL-NLP\r\n$ make\r\n```\r\n\r\n\r\n\r\n## Code Example\r\n\r\nThe following snippet demonstrates how to read CoreNLP annotation from file, \r\nand then using SwiRL to further parse the document for role labels. It shows\r\nhow one can integrate the output of CoreNLP's POS & named entity taggers\r\ninto the input for SwiRL.\r\n\r\nAlternatively, you can take a look at ```src/demo.cpp```.\r\n\r\n```C++\r\n#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n\r\n#include <Swirl.h>\r\n#include \"DocumentSerializer.h\"\r\n\r\nusing namespace std;\r\nusing namespace processors;\r\nusing namespace srl;\r\n\r\nint main(int argc, char ** argv) {\r\n\r\n    // IMPORTANT: Set these paths accordingly\r\n    string swirl = \"./model_swirl\";\r\n    string charniak = \"./model_charniak\";\r\n    string filename = \"/path/to/nlp-annotation.txt\";\r\n\r\n    // Initialize Swirl\r\n    bool caseSensitive = true;\r\n    if (!Swirl::initialize(swirl.c_str(), charniak.c_str(), caseSensitive)) {\r\n        cerr << \"Failed to initialize SRL system!\\n\";\r\n        exit(1);\r\n    }\r\n\r\n    // Open NLP annotation\r\n    ifstream stream(filename.c_str());\r\n    if (stream.is_open()) {\r\n\r\n        // Load annotation\r\n        Document doc = DocumentSerializer::load(stream);\r\n\r\n        // For each sentence, parse with swirl\r\n        TreePtr tree;\r\n        string text, swirlCode;\r\n        const char * line;\r\n        for (int i = 0; i < (int) doc.sentences.size(); i++) {\r\n            // form the sentence text with the necessary POS and entities\r\n            Sentence sentence = doc.sentences.at(i);\r\n            if (sentence.entities.size() == sentence.words.size()) {\r\n                if (sentence.tags.size() == sentence.words.size()) {\r\n                    text = sentence.getTokenizedTextWithTagsEntities();\r\n                    swirlCode = \"1\";\r\n                } else {\r\n                    text = sentence.getTokenizedTextWithEntities();\r\n                    swirlCode = \"2\";\r\n                }\r\n            } else {\r\n                text = sentence.getTokenizedText();\r\n                swirlCode = \"3\";\r\n            }\r\n            cout << text << endl << endl;\r\n            text = swirlCode + string(\" \") + text;\r\n            line = text.c_str();\r\n\r\n            // classify all predicates in this sentence\r\n            tree = Swirl::parse(line);\r\n\r\n            // dump extended Treebank format\r\n            if (tree != (const Tree *) NULL) {\r\n                tree->serialize(cout);\r\n                cout << endl << endl;\r\n            }\r\n\r\n            // dump extended CoNLL format\r\n            Swirl::serialize(tree, line, cout);\r\n        }\r\n\r\n        stream.close();\r\n\r\n    } else {\r\n        cerr << \"Failed to find annotation file!\\n\";\r\n        exit(1);\r\n    }\r\n\r\n    return 0;\r\n} \r\n\r\n```\r\n\r\n\r\n\r\n## Compatibility\r\n\r\n- **[02/2014]** The code was tested to work with\r\n[SwiRL-OSX](http://trananh.github.io/SwiRL-OSX/) (based on\r\nswirl-1.1.0), [WordNet](http://wordnet.princeton.edu/) 3.0, and [edu.arizona.sista.processors](https://github.com/sistanlp/processors) v2.0.\r\n","google":"UA-48101157-1","note":"Don't delete this file! It's used internally to help with page regeneration."}